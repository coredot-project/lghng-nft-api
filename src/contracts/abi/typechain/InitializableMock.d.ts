/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface InitializableMockInterface extends ethers.utils.Interface {
  functions: {
    "fail()": FunctionFragment;
    "initialize()": FunctionFragment;
    "initializeOnlyInitializing()": FunctionFragment;
    "initializeWithX(uint256)": FunctionFragment;
    "initializerNested()": FunctionFragment;
    "initializerRan()": FunctionFragment;
    "nonInitializable(uint256)": FunctionFragment;
    "onlyInitializingNested()": FunctionFragment;
    "onlyInitializingRan()": FunctionFragment;
    "x()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "fail", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializeOnlyInitializing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializeWithX",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initializerNested",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializerRan",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nonInitializable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onlyInitializingNested",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onlyInitializingRan",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "x", values?: undefined): string;

  decodeFunctionResult(functionFragment: "fail", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeOnlyInitializing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeWithX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializerNested",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializerRan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nonInitializable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onlyInitializingNested",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onlyInitializingRan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "x", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}

export class InitializableMock extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: InitializableMockInterface;

  functions: {
    fail(overrides?: CallOverrides): Promise<[void]>;

    "fail()"(overrides?: CallOverrides): Promise<[void]>;

    initialize(overrides?: Overrides): Promise<ContractTransaction>;

    "initialize()"(overrides?: Overrides): Promise<ContractTransaction>;

    initializeOnlyInitializing(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initializeOnlyInitializing()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initializeWithX(
      _x: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "initializeWithX(uint256)"(
      _x: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    initializerNested(overrides?: Overrides): Promise<ContractTransaction>;

    "initializerNested()"(overrides?: Overrides): Promise<ContractTransaction>;

    initializerRan(overrides?: CallOverrides): Promise<[boolean]>;

    "initializerRan()"(overrides?: CallOverrides): Promise<[boolean]>;

    nonInitializable(
      _x: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "nonInitializable(uint256)"(
      _x: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    onlyInitializingNested(overrides?: Overrides): Promise<ContractTransaction>;

    "onlyInitializingNested()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    onlyInitializingRan(overrides?: CallOverrides): Promise<[boolean]>;

    "onlyInitializingRan()"(overrides?: CallOverrides): Promise<[boolean]>;

    x(overrides?: CallOverrides): Promise<[BigNumber]>;

    "x()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  fail(overrides?: CallOverrides): Promise<void>;

  "fail()"(overrides?: CallOverrides): Promise<void>;

  initialize(overrides?: Overrides): Promise<ContractTransaction>;

  "initialize()"(overrides?: Overrides): Promise<ContractTransaction>;

  initializeOnlyInitializing(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initializeOnlyInitializing()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initializeWithX(
    _x: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "initializeWithX(uint256)"(
    _x: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  initializerNested(overrides?: Overrides): Promise<ContractTransaction>;

  "initializerNested()"(overrides?: Overrides): Promise<ContractTransaction>;

  initializerRan(overrides?: CallOverrides): Promise<boolean>;

  "initializerRan()"(overrides?: CallOverrides): Promise<boolean>;

  nonInitializable(
    _x: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "nonInitializable(uint256)"(
    _x: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  onlyInitializingNested(overrides?: Overrides): Promise<ContractTransaction>;

  "onlyInitializingNested()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  onlyInitializingRan(overrides?: CallOverrides): Promise<boolean>;

  "onlyInitializingRan()"(overrides?: CallOverrides): Promise<boolean>;

  x(overrides?: CallOverrides): Promise<BigNumber>;

  "x()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    fail(overrides?: CallOverrides): Promise<void>;

    "fail()"(overrides?: CallOverrides): Promise<void>;

    initialize(overrides?: CallOverrides): Promise<void>;

    "initialize()"(overrides?: CallOverrides): Promise<void>;

    initializeOnlyInitializing(overrides?: CallOverrides): Promise<void>;

    "initializeOnlyInitializing()"(overrides?: CallOverrides): Promise<void>;

    initializeWithX(_x: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "initializeWithX(uint256)"(
      _x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initializerNested(overrides?: CallOverrides): Promise<void>;

    "initializerNested()"(overrides?: CallOverrides): Promise<void>;

    initializerRan(overrides?: CallOverrides): Promise<boolean>;

    "initializerRan()"(overrides?: CallOverrides): Promise<boolean>;

    nonInitializable(
      _x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "nonInitializable(uint256)"(
      _x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    onlyInitializingNested(overrides?: CallOverrides): Promise<void>;

    "onlyInitializingNested()"(overrides?: CallOverrides): Promise<void>;

    onlyInitializingRan(overrides?: CallOverrides): Promise<boolean>;

    "onlyInitializingRan()"(overrides?: CallOverrides): Promise<boolean>;

    x(overrides?: CallOverrides): Promise<BigNumber>;

    "x()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    Initialized(version: null): EventFilter;
  };

  estimateGas: {
    fail(overrides?: CallOverrides): Promise<BigNumber>;

    "fail()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(overrides?: Overrides): Promise<BigNumber>;

    "initialize()"(overrides?: Overrides): Promise<BigNumber>;

    initializeOnlyInitializing(overrides?: Overrides): Promise<BigNumber>;

    "initializeOnlyInitializing()"(overrides?: Overrides): Promise<BigNumber>;

    initializeWithX(
      _x: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "initializeWithX(uint256)"(
      _x: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    initializerNested(overrides?: Overrides): Promise<BigNumber>;

    "initializerNested()"(overrides?: Overrides): Promise<BigNumber>;

    initializerRan(overrides?: CallOverrides): Promise<BigNumber>;

    "initializerRan()"(overrides?: CallOverrides): Promise<BigNumber>;

    nonInitializable(
      _x: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "nonInitializable(uint256)"(
      _x: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    onlyInitializingNested(overrides?: Overrides): Promise<BigNumber>;

    "onlyInitializingNested()"(overrides?: Overrides): Promise<BigNumber>;

    onlyInitializingRan(overrides?: CallOverrides): Promise<BigNumber>;

    "onlyInitializingRan()"(overrides?: CallOverrides): Promise<BigNumber>;

    x(overrides?: CallOverrides): Promise<BigNumber>;

    "x()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    fail(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fail()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(overrides?: Overrides): Promise<PopulatedTransaction>;

    "initialize()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    initializeOnlyInitializing(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initializeOnlyInitializing()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initializeWithX(
      _x: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "initializeWithX(uint256)"(
      _x: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    initializerNested(overrides?: Overrides): Promise<PopulatedTransaction>;

    "initializerNested()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    initializerRan(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "initializerRan()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonInitializable(
      _x: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "nonInitializable(uint256)"(
      _x: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    onlyInitializingNested(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onlyInitializingNested()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    onlyInitializingRan(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "onlyInitializingRan()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    x(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "x()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
