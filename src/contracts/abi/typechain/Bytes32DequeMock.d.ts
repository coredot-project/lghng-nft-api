/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface Bytes32DequeMockInterface extends ethers.utils.Interface {
  functions: {
    "at(uint256)": FunctionFragment;
    "back()": FunctionFragment;
    "clear()": FunctionFragment;
    "empty()": FunctionFragment;
    "front()": FunctionFragment;
    "length()": FunctionFragment;
    "popBack()": FunctionFragment;
    "popFront()": FunctionFragment;
    "pushBack(bytes32)": FunctionFragment;
    "pushFront(bytes32)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "at", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "back", values?: undefined): string;
  encodeFunctionData(functionFragment: "clear", values?: undefined): string;
  encodeFunctionData(functionFragment: "empty", values?: undefined): string;
  encodeFunctionData(functionFragment: "front", values?: undefined): string;
  encodeFunctionData(functionFragment: "length", values?: undefined): string;
  encodeFunctionData(functionFragment: "popBack", values?: undefined): string;
  encodeFunctionData(functionFragment: "popFront", values?: undefined): string;
  encodeFunctionData(functionFragment: "pushBack", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "pushFront",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "at", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "back", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "clear", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "empty", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "front", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "length", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "popBack", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "popFront", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pushBack", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pushFront", data: BytesLike): Result;

  events: {
    "OperationResult(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OperationResult"): EventFragment;
}

export class Bytes32DequeMock extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: Bytes32DequeMockInterface;

  functions: {
    at(i: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "at(uint256)"(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    back(overrides?: CallOverrides): Promise<[string]>;

    "back()"(overrides?: CallOverrides): Promise<[string]>;

    clear(overrides?: Overrides): Promise<ContractTransaction>;

    "clear()"(overrides?: Overrides): Promise<ContractTransaction>;

    empty(overrides?: CallOverrides): Promise<[boolean]>;

    "empty()"(overrides?: CallOverrides): Promise<[boolean]>;

    front(overrides?: CallOverrides): Promise<[string]>;

    "front()"(overrides?: CallOverrides): Promise<[string]>;

    length(overrides?: CallOverrides): Promise<[BigNumber]>;

    "length()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    popBack(overrides?: Overrides): Promise<ContractTransaction>;

    "popBack()"(overrides?: Overrides): Promise<ContractTransaction>;

    popFront(overrides?: Overrides): Promise<ContractTransaction>;

    "popFront()"(overrides?: Overrides): Promise<ContractTransaction>;

    pushBack(
      value: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "pushBack(bytes32)"(
      value: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    pushFront(
      value: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "pushFront(bytes32)"(
      value: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  at(i: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "at(uint256)"(i: BigNumberish, overrides?: CallOverrides): Promise<string>;

  back(overrides?: CallOverrides): Promise<string>;

  "back()"(overrides?: CallOverrides): Promise<string>;

  clear(overrides?: Overrides): Promise<ContractTransaction>;

  "clear()"(overrides?: Overrides): Promise<ContractTransaction>;

  empty(overrides?: CallOverrides): Promise<boolean>;

  "empty()"(overrides?: CallOverrides): Promise<boolean>;

  front(overrides?: CallOverrides): Promise<string>;

  "front()"(overrides?: CallOverrides): Promise<string>;

  length(overrides?: CallOverrides): Promise<BigNumber>;

  "length()"(overrides?: CallOverrides): Promise<BigNumber>;

  popBack(overrides?: Overrides): Promise<ContractTransaction>;

  "popBack()"(overrides?: Overrides): Promise<ContractTransaction>;

  popFront(overrides?: Overrides): Promise<ContractTransaction>;

  "popFront()"(overrides?: Overrides): Promise<ContractTransaction>;

  pushBack(
    value: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "pushBack(bytes32)"(
    value: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  pushFront(
    value: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "pushFront(bytes32)"(
    value: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    at(i: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "at(uint256)"(i: BigNumberish, overrides?: CallOverrides): Promise<string>;

    back(overrides?: CallOverrides): Promise<string>;

    "back()"(overrides?: CallOverrides): Promise<string>;

    clear(overrides?: CallOverrides): Promise<void>;

    "clear()"(overrides?: CallOverrides): Promise<void>;

    empty(overrides?: CallOverrides): Promise<boolean>;

    "empty()"(overrides?: CallOverrides): Promise<boolean>;

    front(overrides?: CallOverrides): Promise<string>;

    "front()"(overrides?: CallOverrides): Promise<string>;

    length(overrides?: CallOverrides): Promise<BigNumber>;

    "length()"(overrides?: CallOverrides): Promise<BigNumber>;

    popBack(overrides?: CallOverrides): Promise<string>;

    "popBack()"(overrides?: CallOverrides): Promise<string>;

    popFront(overrides?: CallOverrides): Promise<string>;

    "popFront()"(overrides?: CallOverrides): Promise<string>;

    pushBack(value: BytesLike, overrides?: CallOverrides): Promise<void>;

    "pushBack(bytes32)"(
      value: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    pushFront(value: BytesLike, overrides?: CallOverrides): Promise<void>;

    "pushFront(bytes32)"(
      value: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OperationResult(value: null): EventFilter;
  };

  estimateGas: {
    at(i: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "at(uint256)"(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    back(overrides?: CallOverrides): Promise<BigNumber>;

    "back()"(overrides?: CallOverrides): Promise<BigNumber>;

    clear(overrides?: Overrides): Promise<BigNumber>;

    "clear()"(overrides?: Overrides): Promise<BigNumber>;

    empty(overrides?: CallOverrides): Promise<BigNumber>;

    "empty()"(overrides?: CallOverrides): Promise<BigNumber>;

    front(overrides?: CallOverrides): Promise<BigNumber>;

    "front()"(overrides?: CallOverrides): Promise<BigNumber>;

    length(overrides?: CallOverrides): Promise<BigNumber>;

    "length()"(overrides?: CallOverrides): Promise<BigNumber>;

    popBack(overrides?: Overrides): Promise<BigNumber>;

    "popBack()"(overrides?: Overrides): Promise<BigNumber>;

    popFront(overrides?: Overrides): Promise<BigNumber>;

    "popFront()"(overrides?: Overrides): Promise<BigNumber>;

    pushBack(value: BytesLike, overrides?: Overrides): Promise<BigNumber>;

    "pushBack(bytes32)"(
      value: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    pushFront(value: BytesLike, overrides?: Overrides): Promise<BigNumber>;

    "pushFront(bytes32)"(
      value: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    at(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "at(uint256)"(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    back(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "back()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    clear(overrides?: Overrides): Promise<PopulatedTransaction>;

    "clear()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    empty(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "empty()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    front(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "front()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    length(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "length()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    popBack(overrides?: Overrides): Promise<PopulatedTransaction>;

    "popBack()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    popFront(overrides?: Overrides): Promise<PopulatedTransaction>;

    "popFront()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    pushBack(
      value: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "pushBack(bytes32)"(
      value: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    pushFront(
      value: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "pushFront(bytes32)"(
      value: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
