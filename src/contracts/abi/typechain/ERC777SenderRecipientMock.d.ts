/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ERC777SenderRecipientMockInterface extends ethers.utils.Interface {
  functions: {
    "burn(address,uint256,bytes)": FunctionFragment;
    "canImplementInterfaceForAddress(bytes32,address)": FunctionFragment;
    "recipientFor(address)": FunctionFragment;
    "registerRecipient(address)": FunctionFragment;
    "registerSender(address)": FunctionFragment;
    "send(address,address,uint256,bytes)": FunctionFragment;
    "senderFor(address)": FunctionFragment;
    "setShouldRevertReceive(bool)": FunctionFragment;
    "setShouldRevertSend(bool)": FunctionFragment;
    "tokensReceived(address,address,address,uint256,bytes,bytes)": FunctionFragment;
    "tokensToSend(address,address,address,uint256,bytes,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "burn",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canImplementInterfaceForAddress",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "recipientFor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerRecipient",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerSender",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "senderFor", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setShouldRevertReceive",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setShouldRevertSend",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensReceived",
    values: [string, string, string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensToSend",
    values: [string, string, string, BigNumberish, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canImplementInterfaceForAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recipientFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "senderFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setShouldRevertReceive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setShouldRevertSend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensToSend",
    data: BytesLike
  ): Result;

  events: {
    "BeforeTokenTransfer()": EventFragment;
    "TokensReceivedCalled(address,address,address,uint256,bytes,bytes,address,uint256,uint256)": EventFragment;
    "TokensToSendCalled(address,address,address,uint256,bytes,bytes,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BeforeTokenTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensReceivedCalled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensToSendCalled"): EventFragment;
}

export class ERC777SenderRecipientMock extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ERC777SenderRecipientMockInterface;

  functions: {
    burn(
      token: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "burn(address,uint256,bytes)"(
      token: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    canImplementInterfaceForAddress(
      interfaceHash: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "canImplementInterfaceForAddress(bytes32,address)"(
      interfaceHash: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    recipientFor(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "recipientFor(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    registerRecipient(
      recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "registerRecipient(address)"(
      recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    registerSender(
      sender: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "registerSender(address)"(
      sender: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    send(
      token: string,
      to: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "send(address,address,uint256,bytes)"(
      token: string,
      to: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    senderFor(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "senderFor(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setShouldRevertReceive(
      shouldRevert: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setShouldRevertReceive(bool)"(
      shouldRevert: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setShouldRevertSend(
      shouldRevert: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setShouldRevertSend(bool)"(
      shouldRevert: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tokensReceived(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "tokensReceived(address,address,address,uint256,bytes,bytes)"(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tokensToSend(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "tokensToSend(address,address,address,uint256,bytes,bytes)"(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  burn(
    token: string,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "burn(address,uint256,bytes)"(
    token: string,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  canImplementInterfaceForAddress(
    interfaceHash: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "canImplementInterfaceForAddress(bytes32,address)"(
    interfaceHash: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<string>;

  recipientFor(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "recipientFor(address)"(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  registerRecipient(
    recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "registerRecipient(address)"(
    recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  registerSender(
    sender: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "registerSender(address)"(
    sender: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  send(
    token: string,
    to: string,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "send(address,address,uint256,bytes)"(
    token: string,
    to: string,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  senderFor(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "senderFor(address)"(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setShouldRevertReceive(
    shouldRevert: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setShouldRevertReceive(bool)"(
    shouldRevert: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setShouldRevertSend(
    shouldRevert: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setShouldRevertSend(bool)"(
    shouldRevert: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tokensReceived(
    operator: string,
    from: string,
    to: string,
    amount: BigNumberish,
    userData: BytesLike,
    operatorData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "tokensReceived(address,address,address,uint256,bytes,bytes)"(
    operator: string,
    from: string,
    to: string,
    amount: BigNumberish,
    userData: BytesLike,
    operatorData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tokensToSend(
    operator: string,
    from: string,
    to: string,
    amount: BigNumberish,
    userData: BytesLike,
    operatorData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "tokensToSend(address,address,address,uint256,bytes,bytes)"(
    operator: string,
    from: string,
    to: string,
    amount: BigNumberish,
    userData: BytesLike,
    operatorData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    burn(
      token: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "burn(address,uint256,bytes)"(
      token: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    canImplementInterfaceForAddress(
      interfaceHash: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "canImplementInterfaceForAddress(bytes32,address)"(
      interfaceHash: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<string>;

    recipientFor(account: string, overrides?: CallOverrides): Promise<void>;

    "recipientFor(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registerRecipient(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerRecipient(address)"(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registerSender(sender: string, overrides?: CallOverrides): Promise<void>;

    "registerSender(address)"(
      sender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    send(
      token: string,
      to: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "send(address,address,uint256,bytes)"(
      token: string,
      to: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    senderFor(account: string, overrides?: CallOverrides): Promise<void>;

    "senderFor(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setShouldRevertReceive(
      shouldRevert: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setShouldRevertReceive(bool)"(
      shouldRevert: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setShouldRevertSend(
      shouldRevert: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setShouldRevertSend(bool)"(
      shouldRevert: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    tokensReceived(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "tokensReceived(address,address,address,uint256,bytes,bytes)"(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    tokensToSend(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "tokensToSend(address,address,address,uint256,bytes,bytes)"(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    BeforeTokenTransfer(): EventFilter;

    TokensReceivedCalled(
      operator: null,
      from: null,
      to: null,
      amount: null,
      data: null,
      operatorData: null,
      token: null,
      fromBalance: null,
      toBalance: null
    ): EventFilter;

    TokensToSendCalled(
      operator: null,
      from: null,
      to: null,
      amount: null,
      data: null,
      operatorData: null,
      token: null,
      fromBalance: null,
      toBalance: null
    ): EventFilter;
  };

  estimateGas: {
    burn(
      token: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "burn(address,uint256,bytes)"(
      token: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    canImplementInterfaceForAddress(
      interfaceHash: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canImplementInterfaceForAddress(bytes32,address)"(
      interfaceHash: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recipientFor(account: string, overrides?: Overrides): Promise<BigNumber>;

    "recipientFor(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    registerRecipient(
      recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "registerRecipient(address)"(
      recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    registerSender(sender: string, overrides?: Overrides): Promise<BigNumber>;

    "registerSender(address)"(
      sender: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    send(
      token: string,
      to: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "send(address,address,uint256,bytes)"(
      token: string,
      to: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    senderFor(account: string, overrides?: Overrides): Promise<BigNumber>;

    "senderFor(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setShouldRevertReceive(
      shouldRevert: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setShouldRevertReceive(bool)"(
      shouldRevert: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setShouldRevertSend(
      shouldRevert: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setShouldRevertSend(bool)"(
      shouldRevert: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tokensReceived(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "tokensReceived(address,address,address,uint256,bytes,bytes)"(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tokensToSend(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "tokensToSend(address,address,address,uint256,bytes,bytes)"(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    burn(
      token: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "burn(address,uint256,bytes)"(
      token: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    canImplementInterfaceForAddress(
      interfaceHash: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canImplementInterfaceForAddress(bytes32,address)"(
      interfaceHash: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recipientFor(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "recipientFor(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    registerRecipient(
      recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "registerRecipient(address)"(
      recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    registerSender(
      sender: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "registerSender(address)"(
      sender: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    send(
      token: string,
      to: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "send(address,address,uint256,bytes)"(
      token: string,
      to: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    senderFor(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "senderFor(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setShouldRevertReceive(
      shouldRevert: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setShouldRevertReceive(bool)"(
      shouldRevert: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setShouldRevertSend(
      shouldRevert: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setShouldRevertSend(bool)"(
      shouldRevert: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tokensReceived(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "tokensReceived(address,address,address,uint256,bytes,bytes)"(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tokensToSend(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "tokensToSend(address,address,address,uint256,bytes,bytes)"(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
