/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PausableMockInterface extends ethers.utils.Interface {
  functions: {
    "count()": FunctionFragment;
    "drasticMeasure()": FunctionFragment;
    "drasticMeasureTaken()": FunctionFragment;
    "normalProcess()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "count", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "drasticMeasure",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "drasticMeasureTaken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "normalProcess",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "count", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "drasticMeasure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "drasticMeasureTaken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "normalProcess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export class PausableMock extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PausableMockInterface;

  functions: {
    count(overrides?: CallOverrides): Promise<[BigNumber]>;

    "count()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    drasticMeasure(overrides?: Overrides): Promise<ContractTransaction>;

    "drasticMeasure()"(overrides?: Overrides): Promise<ContractTransaction>;

    drasticMeasureTaken(overrides?: CallOverrides): Promise<[boolean]>;

    "drasticMeasureTaken()"(overrides?: CallOverrides): Promise<[boolean]>;

    normalProcess(overrides?: Overrides): Promise<ContractTransaction>;

    "normalProcess()"(overrides?: Overrides): Promise<ContractTransaction>;

    pause(overrides?: Overrides): Promise<ContractTransaction>;

    "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[boolean]>;

    unpause(overrides?: Overrides): Promise<ContractTransaction>;

    "unpause()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  count(overrides?: CallOverrides): Promise<BigNumber>;

  "count()"(overrides?: CallOverrides): Promise<BigNumber>;

  drasticMeasure(overrides?: Overrides): Promise<ContractTransaction>;

  "drasticMeasure()"(overrides?: Overrides): Promise<ContractTransaction>;

  drasticMeasureTaken(overrides?: CallOverrides): Promise<boolean>;

  "drasticMeasureTaken()"(overrides?: CallOverrides): Promise<boolean>;

  normalProcess(overrides?: Overrides): Promise<ContractTransaction>;

  "normalProcess()"(overrides?: Overrides): Promise<ContractTransaction>;

  pause(overrides?: Overrides): Promise<ContractTransaction>;

  "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  unpause(overrides?: Overrides): Promise<ContractTransaction>;

  "unpause()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    count(overrides?: CallOverrides): Promise<BigNumber>;

    "count()"(overrides?: CallOverrides): Promise<BigNumber>;

    drasticMeasure(overrides?: CallOverrides): Promise<void>;

    "drasticMeasure()"(overrides?: CallOverrides): Promise<void>;

    drasticMeasureTaken(overrides?: CallOverrides): Promise<boolean>;

    "drasticMeasureTaken()"(overrides?: CallOverrides): Promise<boolean>;

    normalProcess(overrides?: CallOverrides): Promise<void>;

    "normalProcess()"(overrides?: CallOverrides): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    "pause()"(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    unpause(overrides?: CallOverrides): Promise<void>;

    "unpause()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    Paused(account: null): EventFilter;

    Unpaused(account: null): EventFilter;
  };

  estimateGas: {
    count(overrides?: CallOverrides): Promise<BigNumber>;

    "count()"(overrides?: CallOverrides): Promise<BigNumber>;

    drasticMeasure(overrides?: Overrides): Promise<BigNumber>;

    "drasticMeasure()"(overrides?: Overrides): Promise<BigNumber>;

    drasticMeasureTaken(overrides?: CallOverrides): Promise<BigNumber>;

    "drasticMeasureTaken()"(overrides?: CallOverrides): Promise<BigNumber>;

    normalProcess(overrides?: Overrides): Promise<BigNumber>;

    "normalProcess()"(overrides?: Overrides): Promise<BigNumber>;

    pause(overrides?: Overrides): Promise<BigNumber>;

    "pause()"(overrides?: Overrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: Overrides): Promise<BigNumber>;

    "unpause()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    count(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "count()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    drasticMeasure(overrides?: Overrides): Promise<PopulatedTransaction>;

    "drasticMeasure()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    drasticMeasureTaken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "drasticMeasureTaken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    normalProcess(overrides?: Overrides): Promise<PopulatedTransaction>;

    "normalProcess()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "pause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "unpause()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
