/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface AddressImplInterface extends ethers.utils.Interface {
  functions: {
    "functionCall(address,bytes)": FunctionFragment;
    "functionCallWithValue(address,bytes,uint256)": FunctionFragment;
    "functionDelegateCall(address,bytes)": FunctionFragment;
    "functionStaticCall(address,bytes)": FunctionFragment;
    "isContract(address)": FunctionFragment;
    "sendValue(address,uint256)": FunctionFragment;
    "sharedAnswer()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "functionCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "functionCallWithValue",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "functionDelegateCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "functionStaticCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "isContract", values: [string]): string;
  encodeFunctionData(
    functionFragment: "sendValue",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sharedAnswer",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "functionCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionCallWithValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionDelegateCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionStaticCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isContract", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendValue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sharedAnswer",
    data: BytesLike
  ): Result;

  events: {
    "CallReturnValue(string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CallReturnValue"): EventFragment;
}

export class AddressImpl extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: AddressImplInterface;

  functions: {
    functionCall(
      target: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "functionCall(address,bytes)"(
      target: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    functionCallWithValue(
      target: string,
      data: BytesLike,
      value: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "functionCallWithValue(address,bytes,uint256)"(
      target: string,
      data: BytesLike,
      value: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    functionDelegateCall(
      target: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "functionDelegateCall(address,bytes)"(
      target: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    functionStaticCall(
      target: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "functionStaticCall(address,bytes)"(
      target: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isContract(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isContract(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    sendValue(
      receiver: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sendValue(address,uint256)"(
      receiver: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    sharedAnswer(overrides?: CallOverrides): Promise<[string]>;

    "sharedAnswer()"(overrides?: CallOverrides): Promise<[string]>;
  };

  functionCall(
    target: string,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "functionCall(address,bytes)"(
    target: string,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  functionCallWithValue(
    target: string,
    data: BytesLike,
    value: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "functionCallWithValue(address,bytes,uint256)"(
    target: string,
    data: BytesLike,
    value: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  functionDelegateCall(
    target: string,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "functionDelegateCall(address,bytes)"(
    target: string,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  functionStaticCall(
    target: string,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "functionStaticCall(address,bytes)"(
    target: string,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isContract(account: string, overrides?: CallOverrides): Promise<boolean>;

  "isContract(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  sendValue(
    receiver: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sendValue(address,uint256)"(
    receiver: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  sharedAnswer(overrides?: CallOverrides): Promise<string>;

  "sharedAnswer()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    functionCall(
      target: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "functionCall(address,bytes)"(
      target: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    functionCallWithValue(
      target: string,
      data: BytesLike,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "functionCallWithValue(address,bytes,uint256)"(
      target: string,
      data: BytesLike,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    functionDelegateCall(
      target: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "functionDelegateCall(address,bytes)"(
      target: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    functionStaticCall(
      target: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "functionStaticCall(address,bytes)"(
      target: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    isContract(account: string, overrides?: CallOverrides): Promise<boolean>;

    "isContract(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    sendValue(
      receiver: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "sendValue(address,uint256)"(
      receiver: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sharedAnswer(overrides?: CallOverrides): Promise<string>;

    "sharedAnswer()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    CallReturnValue(data: null): EventFilter;
  };

  estimateGas: {
    functionCall(
      target: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "functionCall(address,bytes)"(
      target: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    functionCallWithValue(
      target: string,
      data: BytesLike,
      value: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "functionCallWithValue(address,bytes,uint256)"(
      target: string,
      data: BytesLike,
      value: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    functionDelegateCall(
      target: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "functionDelegateCall(address,bytes)"(
      target: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    functionStaticCall(
      target: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "functionStaticCall(address,bytes)"(
      target: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isContract(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isContract(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendValue(
      receiver: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "sendValue(address,uint256)"(
      receiver: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    sharedAnswer(overrides?: CallOverrides): Promise<BigNumber>;

    "sharedAnswer()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    functionCall(
      target: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "functionCall(address,bytes)"(
      target: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    functionCallWithValue(
      target: string,
      data: BytesLike,
      value: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "functionCallWithValue(address,bytes,uint256)"(
      target: string,
      data: BytesLike,
      value: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    functionDelegateCall(
      target: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "functionDelegateCall(address,bytes)"(
      target: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    functionStaticCall(
      target: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "functionStaticCall(address,bytes)"(
      target: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isContract(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isContract(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sendValue(
      receiver: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sendValue(address,uint256)"(
      receiver: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    sharedAnswer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "sharedAnswer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
