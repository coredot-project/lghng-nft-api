/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface EIP712ExternalInterface extends ethers.utils.Interface {
  functions: {
    "domainSeparator()": FunctionFragment;
    "getChainId()": FunctionFragment;
    "verify(bytes,address,address,string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [BytesLike, string, string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;

  events: {};
}

export class EIP712External extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: EIP712ExternalInterface;

  functions: {
    domainSeparator(overrides?: CallOverrides): Promise<[string]>;

    "domainSeparator()"(overrides?: CallOverrides): Promise<[string]>;

    getChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getChainId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    verify(
      signature: BytesLike,
      signer: string,
      mailTo: string,
      mailContents: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "verify(bytes,address,address,string)"(
      signature: BytesLike,
      signer: string,
      mailTo: string,
      mailContents: string,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  domainSeparator(overrides?: CallOverrides): Promise<string>;

  "domainSeparator()"(overrides?: CallOverrides): Promise<string>;

  getChainId(overrides?: CallOverrides): Promise<BigNumber>;

  "getChainId()"(overrides?: CallOverrides): Promise<BigNumber>;

  verify(
    signature: BytesLike,
    signer: string,
    mailTo: string,
    mailContents: string,
    overrides?: CallOverrides
  ): Promise<void>;

  "verify(bytes,address,address,string)"(
    signature: BytesLike,
    signer: string,
    mailTo: string,
    mailContents: string,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    domainSeparator(overrides?: CallOverrides): Promise<string>;

    "domainSeparator()"(overrides?: CallOverrides): Promise<string>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    "getChainId()"(overrides?: CallOverrides): Promise<BigNumber>;

    verify(
      signature: BytesLike,
      signer: string,
      mailTo: string,
      mailContents: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "verify(bytes,address,address,string)"(
      signature: BytesLike,
      signer: string,
      mailTo: string,
      mailContents: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    domainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    "domainSeparator()"(overrides?: CallOverrides): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    "getChainId()"(overrides?: CallOverrides): Promise<BigNumber>;

    verify(
      signature: BytesLike,
      signer: string,
      mailTo: string,
      mailContents: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "verify(bytes,address,address,string)"(
      signature: BytesLike,
      signer: string,
      mailTo: string,
      mailContents: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    domainSeparator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "domainSeparator()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getChainId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verify(
      signature: BytesLike,
      signer: string,
      mailTo: string,
      mailContents: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "verify(bytes,address,address,string)"(
      signature: BytesLike,
      signer: string,
      mailTo: string,
      mailContents: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
