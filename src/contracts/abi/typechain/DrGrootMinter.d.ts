/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DrGrootMinterInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "MINTER()": FunctionFragment;
    "drgroot()": FunctionFragment;
    "feeTo()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantMinter(address)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "isMinter(address)": FunctionFragment;
    "isWhitelist(address)": FunctionFragment;
    "maxSellNumber()": FunctionFragment;
    "mintByKlay(uint256)": FunctionFragment;
    "mintByWon(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "publicPrice()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeMinter(address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "sellCount()": FunctionFragment;
    "setFeeTo(address)": FunctionFragment;
    "setMaxSellNumber(uint256)": FunctionFragment;
    "setPublicPrice(uint256)": FunctionFragment;
    "setTxLimit(uint256)": FunctionFragment;
    "setWhitelist(address[])": FunctionFragment;
    "setWhitelistPrice(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "txLimit()": FunctionFragment;
    "whitelistPrice()": FunctionFragment;
    "whitelists(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MINTER", values?: undefined): string;
  encodeFunctionData(functionFragment: "drgroot", values?: undefined): string;
  encodeFunctionData(functionFragment: "feeTo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "grantMinter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "isMinter", values: [string]): string;
  encodeFunctionData(functionFragment: "isWhitelist", values: [string]): string;
  encodeFunctionData(
    functionFragment: "maxSellNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintByKlay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintByWon",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "publicPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeMinter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "sellCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "setFeeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setMaxSellNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPublicPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTxLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelist",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "txLimit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "whitelistPrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "whitelists", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MINTER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "drgroot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isMinter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxSellNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintByKlay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintByWon", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publicPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFeeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxSellNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPublicPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTxLimit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "txLimit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelistPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "whitelists", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SetBlacklist(address,bool)": EventFragment;
    "SetFeeTo(address)": EventFragment;
    "SetMaxSellNumber(uint256)": EventFragment;
    "SetPublicPrice(uint256)": EventFragment;
    "SetTxLimit(uint256)": EventFragment;
    "SetWhitelist(address[])": EventFragment;
    "SetWhitelistPrice(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBlacklist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeeTo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMaxSellNumber"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPublicPrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTxLimit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetWhitelist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetWhitelistPrice"): EventFragment;
}

export class DrGrootMinter extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DrGrootMinterInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    MINTER(overrides?: CallOverrides): Promise<[string]>;

    "MINTER()"(overrides?: CallOverrides): Promise<[string]>;

    drgroot(overrides?: CallOverrides): Promise<[string]>;

    "drgroot()"(overrides?: CallOverrides): Promise<[string]>;

    feeTo(overrides?: CallOverrides): Promise<[string]>;

    "feeTo()"(overrides?: CallOverrides): Promise<[string]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantMinter(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantMinter(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isMinter(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isMinter(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWhitelist(_wallet: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isWhitelist(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    maxSellNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxSellNumber()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintByKlay(
      quantity: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "mintByKlay(uint256)"(
      quantity: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    mintByWon(
      to: string,
      quantity: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mintByWon(address,uint256)"(
      to: string,
      quantity: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    publicPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    "publicPrice()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeMinter(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeMinter(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    sellCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "sellCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    setFeeTo(
      _feeTo: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFeeTo(address)"(
      _feeTo: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxSellNumber(
      number: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxSellNumber(uint256)"(
      number: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPublicPrice(
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPublicPrice(uint256)"(
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setTxLimit(
      num: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTxLimit(uint256)"(
      num: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setWhitelist(
      _wallet: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setWhitelist(address[])"(
      _wallet: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setWhitelistPrice(
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setWhitelistPrice(uint256)"(
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    txLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    "txLimit()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    whitelistPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    "whitelistPrice()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    whitelists(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "whitelists(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  MINTER(overrides?: CallOverrides): Promise<string>;

  "MINTER()"(overrides?: CallOverrides): Promise<string>;

  drgroot(overrides?: CallOverrides): Promise<string>;

  "drgroot()"(overrides?: CallOverrides): Promise<string>;

  feeTo(overrides?: CallOverrides): Promise<string>;

  "feeTo()"(overrides?: CallOverrides): Promise<string>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  grantMinter(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantMinter(address)"(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isMinter(account: string, overrides?: CallOverrides): Promise<boolean>;

  "isMinter(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWhitelist(_wallet: string, overrides?: CallOverrides): Promise<boolean>;

  "isWhitelist(address)"(
    _wallet: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  maxSellNumber(overrides?: CallOverrides): Promise<BigNumber>;

  "maxSellNumber()"(overrides?: CallOverrides): Promise<BigNumber>;

  mintByKlay(
    quantity: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "mintByKlay(uint256)"(
    quantity: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  mintByWon(
    to: string,
    quantity: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mintByWon(address,uint256)"(
    to: string,
    quantity: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  publicPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "publicPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "renounceRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeMinter(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeMinter(address)"(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  sellCount(overrides?: CallOverrides): Promise<BigNumber>;

  "sellCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  setFeeTo(_feeTo: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setFeeTo(address)"(
    _feeTo: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxSellNumber(
    number: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxSellNumber(uint256)"(
    number: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPublicPrice(
    price: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPublicPrice(uint256)"(
    price: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setTxLimit(
    num: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTxLimit(uint256)"(
    num: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setWhitelist(
    _wallet: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setWhitelist(address[])"(
    _wallet: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setWhitelistPrice(
    price: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setWhitelistPrice(uint256)"(
    price: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  txLimit(overrides?: CallOverrides): Promise<BigNumber>;

  "txLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

  whitelistPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "whitelistPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  whitelists(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "whitelists(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    MINTER(overrides?: CallOverrides): Promise<string>;

    "MINTER()"(overrides?: CallOverrides): Promise<string>;

    drgroot(overrides?: CallOverrides): Promise<string>;

    "drgroot()"(overrides?: CallOverrides): Promise<string>;

    feeTo(overrides?: CallOverrides): Promise<string>;

    "feeTo()"(overrides?: CallOverrides): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    grantMinter(account: string, overrides?: CallOverrides): Promise<void>;

    "grantMinter(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMinter(account: string, overrides?: CallOverrides): Promise<boolean>;

    "isMinter(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWhitelist(_wallet: string, overrides?: CallOverrides): Promise<boolean>;

    "isWhitelist(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maxSellNumber(overrides?: CallOverrides): Promise<BigNumber>;

    "maxSellNumber()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintByKlay(
      quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mintByKlay(uint256)"(
      quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintByWon(
      to: string,
      quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mintByWon(address,uint256)"(
      to: string,
      quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    publicPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "publicPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeMinter(account: string, overrides?: CallOverrides): Promise<void>;

    "revokeMinter(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sellCount(overrides?: CallOverrides): Promise<BigNumber>;

    "sellCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    setFeeTo(_feeTo: string, overrides?: CallOverrides): Promise<void>;

    "setFeeTo(address)"(
      _feeTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxSellNumber(
      number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxSellNumber(uint256)"(
      number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPublicPrice(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPublicPrice(uint256)"(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTxLimit(num: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setTxLimit(uint256)"(
      num: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWhitelist(_wallet: string[], overrides?: CallOverrides): Promise<void>;

    "setWhitelist(address[])"(
      _wallet: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setWhitelistPrice(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setWhitelistPrice(uint256)"(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    txLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "txLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "whitelistPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    whitelists(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "whitelists(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    RoleAdminChanged(
      role: BytesLike | null,
      previousAdminRole: BytesLike | null,
      newAdminRole: BytesLike | null
    ): EventFilter;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    SetBlacklist(account: null, status: null): EventFilter;

    SetFeeTo(feeTo: null): EventFilter;

    SetMaxSellNumber(number: null): EventFilter;

    SetPublicPrice(price: null): EventFilter;

    SetTxLimit(num: null): EventFilter;

    SetWhitelist(wallet: null): EventFilter;

    SetWhitelistPrice(price: null): EventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    MINTER(overrides?: CallOverrides): Promise<BigNumber>;

    "MINTER()"(overrides?: CallOverrides): Promise<BigNumber>;

    drgroot(overrides?: CallOverrides): Promise<BigNumber>;

    "drgroot()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeTo(overrides?: CallOverrides): Promise<BigNumber>;

    "feeTo()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantMinter(account: string, overrides?: Overrides): Promise<BigNumber>;

    "grantMinter(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMinter(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isMinter(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhitelist(_wallet: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isWhitelist(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxSellNumber(overrides?: CallOverrides): Promise<BigNumber>;

    "maxSellNumber()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintByKlay(
      quantity: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "mintByKlay(uint256)"(
      quantity: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    mintByWon(
      to: string,
      quantity: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mintByWon(address,uint256)"(
      to: string,
      quantity: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    publicPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "publicPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeMinter(account: string, overrides?: Overrides): Promise<BigNumber>;

    "revokeMinter(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    sellCount(overrides?: CallOverrides): Promise<BigNumber>;

    "sellCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    setFeeTo(_feeTo: string, overrides?: Overrides): Promise<BigNumber>;

    "setFeeTo(address)"(
      _feeTo: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxSellNumber(
      number: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMaxSellNumber(uint256)"(
      number: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPublicPrice(
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPublicPrice(uint256)"(
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setTxLimit(num: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setTxLimit(uint256)"(
      num: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setWhitelist(_wallet: string[], overrides?: Overrides): Promise<BigNumber>;

    "setWhitelist(address[])"(
      _wallet: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    setWhitelistPrice(
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setWhitelistPrice(uint256)"(
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    txLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "txLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "whitelistPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    whitelists(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "whitelists(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MINTER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MINTER()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    drgroot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "drgroot()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeTo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feeTo()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantMinter(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantMinter(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMinter(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isMinter(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelist(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isWhitelist(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxSellNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxSellNumber()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintByKlay(
      quantity: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "mintByKlay(uint256)"(
      quantity: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    mintByWon(
      to: string,
      quantity: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mintByWon(address,uint256)"(
      to: string,
      quantity: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publicPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "publicPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeMinter(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeMinter(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    sellCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "sellCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFeeTo(
      _feeTo: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFeeTo(address)"(
      _feeTo: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxSellNumber(
      number: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxSellNumber(uint256)"(
      number: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPublicPrice(
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPublicPrice(uint256)"(
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setTxLimit(
      num: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTxLimit(uint256)"(
      num: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setWhitelist(
      _wallet: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setWhitelist(address[])"(
      _wallet: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setWhitelistPrice(
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setWhitelistPrice(uint256)"(
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    txLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "txLimit()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "whitelistPrice()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelists(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "whitelists(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
