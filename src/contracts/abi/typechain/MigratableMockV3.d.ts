/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MigratableMockV3Interface extends ethers.utils.Interface {
  functions: {
    "initialize(uint256)": FunctionFragment;
    "migrate(uint256,uint256)": FunctionFragment;
    "x()": FunctionFragment;
    "y()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "migrate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "x", values?: undefined): string;
  encodeFunctionData(functionFragment: "y", values?: undefined): string;

  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "x", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "y", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}

export class MigratableMockV3 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MigratableMockV3Interface;

  functions: {
    initialize(
      value: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "initialize(uint256)"(
      value: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "migrate(uint256,uint256)"(
      value: BigNumberish,
      anotherValue: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "migrate()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

    x(overrides?: CallOverrides): Promise<[BigNumber]>;

    "x()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    y(overrides?: CallOverrides): Promise<[BigNumber]>;

    "y()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  initialize(
    value: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "initialize(uint256)"(
    value: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "migrate(uint256,uint256)"(
    value: BigNumberish,
    anotherValue: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "migrate()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

  x(overrides?: CallOverrides): Promise<BigNumber>;

  "x()"(overrides?: CallOverrides): Promise<BigNumber>;

  y(overrides?: CallOverrides): Promise<BigNumber>;

  "y()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    initialize(value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "initialize(uint256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "migrate(uint256,uint256)"(
      value: BigNumberish,
      anotherValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "migrate()"(overrides?: CallOverrides): Promise<void>;

    x(overrides?: CallOverrides): Promise<BigNumber>;

    "x()"(overrides?: CallOverrides): Promise<BigNumber>;

    y(overrides?: CallOverrides): Promise<BigNumber>;

    "y()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    Initialized(version: null): EventFilter;
  };

  estimateGas: {
    initialize(
      value: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "initialize(uint256)"(
      value: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "migrate(uint256,uint256)"(
      value: BigNumberish,
      anotherValue: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "migrate()"(overrides?: PayableOverrides): Promise<BigNumber>;

    x(overrides?: CallOverrides): Promise<BigNumber>;

    "x()"(overrides?: CallOverrides): Promise<BigNumber>;

    y(overrides?: CallOverrides): Promise<BigNumber>;

    "y()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    initialize(
      value: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "initialize(uint256)"(
      value: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "migrate(uint256,uint256)"(
      value: BigNumberish,
      anotherValue: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "migrate()"(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    x(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "x()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    y(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "y()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
