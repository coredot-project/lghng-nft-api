/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface CallReceiverMockInterface extends ethers.utils.Interface {
  functions: {
    "mockFunction()": FunctionFragment;
    "mockFunctionNonPayable()": FunctionFragment;
    "mockFunctionOutOfGas()": FunctionFragment;
    "mockFunctionRevertsNoReason()": FunctionFragment;
    "mockFunctionRevertsReason()": FunctionFragment;
    "mockFunctionThrows()": FunctionFragment;
    "mockFunctionWithArgs(uint256,uint256)": FunctionFragment;
    "mockFunctionWritesStorage()": FunctionFragment;
    "mockStaticFunction()": FunctionFragment;
    "sharedAnswer()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "mockFunction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mockFunctionNonPayable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mockFunctionOutOfGas",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mockFunctionRevertsNoReason",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mockFunctionRevertsReason",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mockFunctionThrows",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mockFunctionWithArgs",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mockFunctionWritesStorage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mockStaticFunction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sharedAnswer",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "mockFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockFunctionNonPayable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockFunctionOutOfGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockFunctionRevertsNoReason",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockFunctionRevertsReason",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockFunctionThrows",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockFunctionWithArgs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockFunctionWritesStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockStaticFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sharedAnswer",
    data: BytesLike
  ): Result;

  events: {
    "MockFunctionCalled()": EventFragment;
    "MockFunctionCalledWithArgs(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MockFunctionCalled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MockFunctionCalledWithArgs"): EventFragment;
}

export class CallReceiverMock extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: CallReceiverMockInterface;

  functions: {
    mockFunction(overrides?: PayableOverrides): Promise<ContractTransaction>;

    "mockFunction()"(
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    mockFunctionNonPayable(overrides?: Overrides): Promise<ContractTransaction>;

    "mockFunctionNonPayable()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mockFunctionOutOfGas(
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "mockFunctionOutOfGas()"(
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    mockFunctionRevertsNoReason(
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "mockFunctionRevertsNoReason()"(
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    mockFunctionRevertsReason(
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "mockFunctionRevertsReason()"(
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    mockFunctionThrows(
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "mockFunctionThrows()"(
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    mockFunctionWithArgs(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "mockFunctionWithArgs(uint256,uint256)"(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    mockFunctionWritesStorage(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mockFunctionWritesStorage()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mockStaticFunction(overrides?: CallOverrides): Promise<[string]>;

    "mockStaticFunction()"(overrides?: CallOverrides): Promise<[string]>;

    sharedAnswer(overrides?: CallOverrides): Promise<[string]>;

    "sharedAnswer()"(overrides?: CallOverrides): Promise<[string]>;
  };

  mockFunction(overrides?: PayableOverrides): Promise<ContractTransaction>;

  "mockFunction()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

  mockFunctionNonPayable(overrides?: Overrides): Promise<ContractTransaction>;

  "mockFunctionNonPayable()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mockFunctionOutOfGas(
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "mockFunctionOutOfGas()"(
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  mockFunctionRevertsNoReason(
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "mockFunctionRevertsNoReason()"(
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  mockFunctionRevertsReason(
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "mockFunctionRevertsReason()"(
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  mockFunctionThrows(
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "mockFunctionThrows()"(
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  mockFunctionWithArgs(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "mockFunctionWithArgs(uint256,uint256)"(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  mockFunctionWritesStorage(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mockFunctionWritesStorage()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mockStaticFunction(overrides?: CallOverrides): Promise<string>;

  "mockStaticFunction()"(overrides?: CallOverrides): Promise<string>;

  sharedAnswer(overrides?: CallOverrides): Promise<string>;

  "sharedAnswer()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    mockFunction(overrides?: CallOverrides): Promise<string>;

    "mockFunction()"(overrides?: CallOverrides): Promise<string>;

    mockFunctionNonPayable(overrides?: CallOverrides): Promise<string>;

    "mockFunctionNonPayable()"(overrides?: CallOverrides): Promise<string>;

    mockFunctionOutOfGas(overrides?: CallOverrides): Promise<void>;

    "mockFunctionOutOfGas()"(overrides?: CallOverrides): Promise<void>;

    mockFunctionRevertsNoReason(overrides?: CallOverrides): Promise<void>;

    "mockFunctionRevertsNoReason()"(overrides?: CallOverrides): Promise<void>;

    mockFunctionRevertsReason(overrides?: CallOverrides): Promise<void>;

    "mockFunctionRevertsReason()"(overrides?: CallOverrides): Promise<void>;

    mockFunctionThrows(overrides?: CallOverrides): Promise<void>;

    "mockFunctionThrows()"(overrides?: CallOverrides): Promise<void>;

    mockFunctionWithArgs(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "mockFunctionWithArgs(uint256,uint256)"(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    mockFunctionWritesStorage(overrides?: CallOverrides): Promise<string>;

    "mockFunctionWritesStorage()"(overrides?: CallOverrides): Promise<string>;

    mockStaticFunction(overrides?: CallOverrides): Promise<string>;

    "mockStaticFunction()"(overrides?: CallOverrides): Promise<string>;

    sharedAnswer(overrides?: CallOverrides): Promise<string>;

    "sharedAnswer()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    MockFunctionCalled(): EventFilter;

    MockFunctionCalledWithArgs(a: null, b: null): EventFilter;
  };

  estimateGas: {
    mockFunction(overrides?: PayableOverrides): Promise<BigNumber>;

    "mockFunction()"(overrides?: PayableOverrides): Promise<BigNumber>;

    mockFunctionNonPayable(overrides?: Overrides): Promise<BigNumber>;

    "mockFunctionNonPayable()"(overrides?: Overrides): Promise<BigNumber>;

    mockFunctionOutOfGas(overrides?: PayableOverrides): Promise<BigNumber>;

    "mockFunctionOutOfGas()"(overrides?: PayableOverrides): Promise<BigNumber>;

    mockFunctionRevertsNoReason(
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "mockFunctionRevertsNoReason()"(
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    mockFunctionRevertsReason(overrides?: PayableOverrides): Promise<BigNumber>;

    "mockFunctionRevertsReason()"(
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    mockFunctionThrows(overrides?: PayableOverrides): Promise<BigNumber>;

    "mockFunctionThrows()"(overrides?: PayableOverrides): Promise<BigNumber>;

    mockFunctionWithArgs(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "mockFunctionWithArgs(uint256,uint256)"(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    mockFunctionWritesStorage(overrides?: Overrides): Promise<BigNumber>;

    "mockFunctionWritesStorage()"(overrides?: Overrides): Promise<BigNumber>;

    mockStaticFunction(overrides?: CallOverrides): Promise<BigNumber>;

    "mockStaticFunction()"(overrides?: CallOverrides): Promise<BigNumber>;

    sharedAnswer(overrides?: CallOverrides): Promise<BigNumber>;

    "sharedAnswer()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    mockFunction(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    "mockFunction()"(
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    mockFunctionNonPayable(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mockFunctionNonPayable()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mockFunctionOutOfGas(
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "mockFunctionOutOfGas()"(
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    mockFunctionRevertsNoReason(
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "mockFunctionRevertsNoReason()"(
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    mockFunctionRevertsReason(
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "mockFunctionRevertsReason()"(
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    mockFunctionThrows(
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "mockFunctionThrows()"(
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    mockFunctionWithArgs(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "mockFunctionWithArgs(uint256,uint256)"(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    mockFunctionWritesStorage(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mockFunctionWritesStorage()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mockStaticFunction(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "mockStaticFunction()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sharedAnswer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "sharedAnswer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
