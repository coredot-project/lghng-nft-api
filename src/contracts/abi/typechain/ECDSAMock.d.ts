/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ECDSAMockInterface extends ethers.utils.Interface {
  functions: {
    "recover(bytes32,bytes)": FunctionFragment;
    "recover_r_vs(bytes32,bytes32,bytes32)": FunctionFragment;
    "recover_v_r_s(bytes32,uint8,bytes32,bytes32)": FunctionFragment;
    "toEthSignedMessageHash(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "recover",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recover_r_vs",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recover_v_r_s",
    values: [BytesLike, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "toEthSignedMessageHash",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "recover", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recover_r_vs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recover_v_r_s",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toEthSignedMessageHash",
    data: BytesLike
  ): Result;

  events: {};
}

export class ECDSAMock extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ECDSAMockInterface;

  functions: {
    recover(
      hash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "recover(bytes32,bytes)"(
      hash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    recover_r_vs(
      hash: BytesLike,
      r: BytesLike,
      vs: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "recover_r_vs(bytes32,bytes32,bytes32)"(
      hash: BytesLike,
      r: BytesLike,
      vs: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    recover_v_r_s(
      hash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "recover_v_r_s(bytes32,uint8,bytes32,bytes32)"(
      hash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "toEthSignedMessageHash(bytes32)"(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "toEthSignedMessageHash(bytes)"(
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  recover(
    hash: BytesLike,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "recover(bytes32,bytes)"(
    hash: BytesLike,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  recover_r_vs(
    hash: BytesLike,
    r: BytesLike,
    vs: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "recover_r_vs(bytes32,bytes32,bytes32)"(
    hash: BytesLike,
    r: BytesLike,
    vs: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  recover_v_r_s(
    hash: BytesLike,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "recover_v_r_s(bytes32,uint8,bytes32,bytes32)"(
    hash: BytesLike,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "toEthSignedMessageHash(bytes32)"(
    hash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "toEthSignedMessageHash(bytes)"(
    s: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    recover(
      hash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "recover(bytes32,bytes)"(
      hash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    recover_r_vs(
      hash: BytesLike,
      r: BytesLike,
      vs: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "recover_r_vs(bytes32,bytes32,bytes32)"(
      hash: BytesLike,
      r: BytesLike,
      vs: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    recover_v_r_s(
      hash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "recover_v_r_s(bytes32,uint8,bytes32,bytes32)"(
      hash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "toEthSignedMessageHash(bytes32)"(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "toEthSignedMessageHash(bytes)"(
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    recover(
      hash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "recover(bytes32,bytes)"(
      hash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recover_r_vs(
      hash: BytesLike,
      r: BytesLike,
      vs: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "recover_r_vs(bytes32,bytes32,bytes32)"(
      hash: BytesLike,
      r: BytesLike,
      vs: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recover_v_r_s(
      hash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "recover_v_r_s(bytes32,uint8,bytes32,bytes32)"(
      hash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toEthSignedMessageHash(bytes32)"(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toEthSignedMessageHash(bytes)"(
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    recover(
      hash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "recover(bytes32,bytes)"(
      hash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recover_r_vs(
      hash: BytesLike,
      r: BytesLike,
      vs: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "recover_r_vs(bytes32,bytes32,bytes32)"(
      hash: BytesLike,
      r: BytesLike,
      vs: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recover_v_r_s(
      hash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "recover_v_r_s(bytes32,uint8,bytes32,bytes32)"(
      hash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "toEthSignedMessageHash(bytes32)"(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "toEthSignedMessageHash(bytes)"(
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
